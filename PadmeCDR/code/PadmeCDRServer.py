#!/usr/bin/python

import os
import sys
import time
import subprocess
import re

from Logger import Logger

class PadmeCDRServer:

    def __init__(self,source_site,destination_site,daq_server,mode):

        # Get position of CDR main directory from PADME_CDR_DIR environment variable
        # Default to current dir if not set
        self.cdr_dir = os.getenv('PADME_CDR_DIR',".")

        # Get source and destination sites and name of data server
        self.source_site      = source_site
        self.destination_site = destination_site
        self.daq_server       = daq_server

        self.server_id = ""
        if self.source_site == "DAQ":
            self.server_id += "%s_%s_%s"%(self.source_site,self.daq_server,self.destination_site)
        else:
            self.server_id += "%s_%s"%(self.source_site,self.destination_site)

        # Redefine print to send output to log file
        self.log_file = "%s/log/PadmeCDRServer_%s.log"%(self.cdr_dir,self.server_id)
        sys.stdout = Logger(self.log_file)
        sys.stderr = sys.stdout
        if mode == "i": sys.stdout.interactive = True

        print ""
        print "### PadmeCDRServer Initializing ###"
        print "Source: %s %s"%(self.source_site,self.daq_server)
        print "Destination: %s"%self.destination_site
        print ""

        # Define file to store list of files with transfer errors
        self.transfer_error_list_file = "%s/log/transfer_error_%s.list"%(self.cdr_dir,self.server_id)

        # Create lock file
        self.lock_file = "%s/run/lock_%s"%(self.cdr_dir,self.server_id)
        if (self.create_lock_file() == "error"): exit(1)

        # Path to long-lived generic proxy file generated by calling program
        self.long_proxy_file =  self.cdr_dir+"/run/long_proxy"

        # Path to stop_cdr file: when file appears, server will remove it and gently exit
        self.stop_cdr_file = "%s/run/stop_cdr_%s"%(self.cdr_dir,self.server_id)

        # User running CDR
        self.cdr_user = os.environ['USER']

        # Path of current year rawdata wrt top daq directory
        self.year = time.strftime("%Y",time.gmtime())
        self.data_dir = "%s/rawdata"%self.year

        # Define minimum duration for an iteration (4 hours = 14400 seconds)
        self.iteration_minimum_duration = 14400

        ############################
        ### DAQ data server data ###
        ############################

        # Access information for DAQ data server
        self.daq_user = "daq"
        self.daq_keyfile = "/home/%s/.ssh/id_rsa_cdr"%self.cdr_user

        # Path to top daq data directory on DAQ data server
        self.daq_path = "/data/DAQ"

        # Path to adler32 command on DAQ data server
        self.daq_adler32_cmd = "/home/daq/DAQ/tools/adler32"

        # SFTP URL for rawdata on DAQ data server
        self.daq_sftp = "sftp://%s%s"%(self.daq_server,self.daq_path)

        # SSH syntax to execute a command on the DAQ data server
        self.daq_ssh = "ssh -i %s -l %s %s"%(self.daq_keyfile,self.daq_user,self.daq_server)

        ##############################
        ### KLOE tape library data ###
        ##############################

        # Access information for KLOE front end
        self.kloe_server = "fibm15"
        self.kloe_user = "pdm"
        self.kloe_keyfile = "/home/%s/.ssh/id_rsa_cdr"%self.cdr_user

        # Path to top daq data directory on KLOE front end
        self.kloe_path = "/pdm/padme/daq"

        # Path to adler32 command on KLOE front end
        self.kloe_adler32_cmd = "/pdm/bin/adler32"

        # SFTP URL for rawdata on KLOE front end
        self.kloe_sftp = "sftp://%s%s"%(self.kloe_server,self.kloe_path)

        # SSH syntax to execute a command on KLOE front end
        self.kloe_ssh = "ssh -i %s -l %s %s"%(self.kloe_keyfile,self.kloe_user,self.kloe_server)

        ###################################
        ### LNF and CNAF SRM sites data ###
        ###################################

        # SRM addresses for PADME DAQ data at LNF and at CNAF
        self.lnf_srm = "srm://atlasse.lnf.infn.it:8446/srm/managerv2?SFN=/dpm/lnf.infn.it/home/vo.padme.org/daq"
        self.cnaf_srm = "srm://storm-fe-archive.cr.cnaf.infn.it:8444/srm/managerv2?SFN=/padmeTape/daq"

        # Initialization is finished: start the main CDR loop
        self.main_loop()

    def create_lock_file(self):

        print "- Creating lock file %s"%self.lock_file

        # Check if lock file exists
        if (os.path.exists(self.lock_file)):
            if (os.path.isfile(self.lock_file)):
                pid = 0
                with open(self.lock_file,"r") as lf:
                    for ll in lf: pid = ll

                print "Lock file %s found for pid %s - checking status"%(self.lock_file,pid)

                ppinfo = os.popen("ps -p %s"%pid)
                pinfo = ppinfo.readlines()
                ppinfo.close()
                if len(pinfo)==2:
                    if pinfo[1].find("<defunct>")>-1:
                        print "There is zombie process with this pid. The PadmeCDRServer is probably dead. Proceeding cautiously..."
                    else:
                        print "ERROR - there is already a PadmeCDRServer running with pid %s"%pid
                        return "error"
                else:
                    print "No PadmeCDRServer process found. As you were..."
            else:
                print "ERROR - Lock file %s found but it is not a file"%self.lock_file
                return "error"

        # Create our own lock file
        with open(self.lock_file,"w") as lf:
            lf.write("%d\n"%os.getpid())

        return "ok"

    def remove_lock_file(self):
        print "- Removing lock file %s"%self.lock_file
        if (os.path.exists(self.lock_file)):
            if (os.path.isfile(self.lock_file)):
                os.remove(self.lock_file)
            else:
                print "WARNING - lock file %s exists but IS NOT A FILE. Will not remove it"%self.lock_file
        else:
            print "WARNING - lock file %s DOES NOT EXIST"%self.lock_file


    def renew_voms_proxy(self):

        # Make sure proxy is valid or renew it
        # WARNING: we assume that processing a file will take less than 2 hours!

        # Generate VOMS proxy using long lived generic proxy
        renew = True

        # Check if current proxy is still valid and renew it if less than 2 hours before it expires
        for line in self.run_command("voms-proxy-info"):
            #print(line.rstrip())
            r = re.match("^timeleft  \: (\d+)\:.*$",line)
            if r and int(r.group(1))>=2: renew = False

        if renew:
            print "- Proxy is missing or will expire in less than 2 hours. Renewing it"
            cmd = "voms-proxy-init --noregen --cert %s --key %s --voms vo.padme.org --valid 24:00"%(self.long_proxy_file,self.long_proxy_file)
            for line in self.run_command(cmd): print(line.rstrip())
                # Need code to handle proxy creation errors (e.g. when long-lived proxy expired)
                # In this case we should issue some message and exit the program

    def get_file_list_daq(self):
        self.daq_list = []
        print "Getting list of raw data files for year %s on DAQ server %s"%(self.year,self.daq_server)
        cmd = "%s \'( cd %s/%s; find -type f -name \*.root | sed -e s+\./++ )\'"%(self.daq_ssh,self.daq_path,self.data_dir)
        for line in self.run_command(cmd):
            self.daq_list.append(line.rstrip())
        return "ok"

    def get_file_list_kloe(self):

        # Compile regexp to extract file name (improves performance)
        re_get_rawdata_file = re.compile("^.* %s/%s/(.*\.root) .*$"%(self.kloe_path,self.data_dir))

        self.kloe_list = []
        print "Getting list of raw data files for year %s on KLOE tape library"%self.year

        # First we get list of files currently on disk buffer
        cmd = "%s \'( cd %s/%s; find . -type f -name \*.root | sed -e s+\./++ )\'"%(self.kloe_ssh,self.kloe_path,self.data_dir)
        for line in self.run_command(cmd):
            self.kloe_list.append(line.rstrip())

        # Second we get list of files already stored on the tape library
        cmd = "%s \'( dsmc query archive -subdir=yes %s/%s/\*.root )\'"%(self.kloe_ssh,self.kloe_path,self.data_dir)
        for line in self.run_command(cmd):
            m = re_get_rawdata_file.match(line)
            if (m): self.kloe_list.append(m.group(1))

        # Remove duplicates and sort
        self.kloe_list = sorted(set(self.kloe_list))

        return "ok"

    def get_file_list_lnf(self):
        self.renew_voms_proxy()
        print "Getting list of raw data files for year %s on LNF disks"%self.year
        self.lnf_list = []

        lnf_dir_list = []
        for line in self.run_command("gfal-ls %s/%s"%(self.lnf_srm,self.data_dir)):
            if re.match("^gfal-ls error: ",line):
                print "***ERROR*** gfal-ls returned error status while retrieving run list from LNF"
                return "error"
            lnf_dir_list.append(line.rstrip())
        lnf_dir_list.sort()

        for run_dir in lnf_dir_list:
            self.check_stop_cdr()
            for line in self.run_command("gfal-ls %s/%s/%s"%(self.lnf_srm,self.data_dir,run_dir)):
                if re.match("^gfal-ls error: ",line):
                    print "***ERROR*** gfal-ls returned error status while retrieving file list from run dir %s from LNF"%run_dir
                    return "error"
                self.lnf_list.append("%s/%s"%(run_dir,line.rstrip()))

        return "ok"

    def get_file_list_cnaf(self):
        self.renew_voms_proxy()
        print "Getting list of raw data files for year %s on CNAF tape library"%self.year
        self.cnaf_list = []

        cnaf_dir_list = []
        for line in self.run_command("gfal-ls %s/%s"%(self.cnaf_srm,self.data_dir)):
            if re.match("^gfal-ls error: ",line):
                print "***ERROR*** gfal-ls returned error status while retrieving run list from CNAF"
                return "error"
            cnaf_dir_list.append(line.rstrip())
            cnaf_dir_list.sort()

        for run_dir in cnaf_dir_list:
            self.check_stop_cdr()
            for line in self.run_command("gfal-ls %s/%s/%s"%(self.cnaf_srm,self.data_dir,run_dir)):
                if re.match("^gfal-ls error: ",line):
                    print "***ERROR*** gfal-ls returned error status while retrieving file list from run dir %s from CNAF"%run_dir
                    return "error"
                self.cnaf_list.append("%s/%s"%(run_dir,line.rstrip()))

        return "ok"

    def get_checksum_cnaf(self,rawfile):
        a32 = ""
        cmd = "gfal-sum %s/%s/%s adler32"%(self.cnaf_srm,self.data_dir,rawfile);
        for line in self.run_command(cmd):
            print line.rstrip()
            try:
                (fdummy,a32) = line.rstrip().split()
            except:
                a32 = ""
        return a32

    def get_checksum_lnf(self,rawfile):
        a32 = ""
        cmd = "gfal-sum %s/%s/%s adler32"%(self.lnf_srm,self.data_dir,rawfile);
        for line in self.run_command(cmd):
            print line.rstrip()
            try:
                (fdummy,a32) = line.rstrip().split()
            except:
                a32 = ""
        return a32

    def get_checksum_daq(self,rawfile):
        a32 = ""
        cmd = "%s %s %s/%s/%s"%(self.daq_ssh,self.daq_adler32_cmd,self.daq_path,self.data_dir,rawfile)
        for line in self.run_command(cmd):
            print line.rstrip()
            try:
                (a32,fdummy) = line.rstrip().split()
            except:
                a32 = ""
        return a32

    def get_checksum_kloe(self,rawfile):
        a32 = ""
        cmd = "%s %s %s/%s/%s"%(self.kloe_ssh,self.kloe_adler32_cmd,self.kloe_path,self.data_dir,rawfile)
        for line in self.run_command(cmd):
            print line.rstrip()
            try:
                (a32,fdummy) = line.rstrip().split()
            except:
                a32 = ""
        return a32

    def run_command(self,command):
        print "> %s"%command
        p = subprocess.Popen(command,stdout=subprocess.PIPE,stderr=subprocess.STDOUT,shell=True)
        return iter(p.stdout.readline,b'')

    def check_stop_cdr(self):
        if (os.path.exists(self.stop_cdr_file)):
            if (os.path.isfile(self.stop_cdr_file)):
                print "- Stop request file %s found. Removing it and exiting..."%self.stop_cdr_file
                os.remove(self.stop_cdr_file)
            else:
                print "- WARNING - Stop request at path %s found but IT IS NOT A FILE."%self.stop_cdr_file
                print "- I will not try to remove it but I will exit anyway..."
            self.remove_lock_file()
            print ""
            print "### PadmeCDRServer ### Exiting ###"
            sys.exit(0)

    def copy_file_daq_lnf(self,rawfile):

        self.renew_voms_proxy()

        copy_failed = False
        print "- File %s - Starting copy from DAQ to LNF"%rawfile
        cmd = "gfal-copy -t 3600 -T 3600 -p -D\"SFTP PLUGIN:USER=%s\" -D\"SFTP PLUGIN:PRIVKEY=%s\" %s/%s/%s %s/%s/%s"%(self.daq_user,self.daq_keyfile,self.daq_sftp,self.data_dir,rawfile,self.lnf_srm,self.data_dir,rawfile);
        for line in self.run_command(cmd):
            print line.rstrip()
            if re.match("^gfal-copy error: ",line): copy_failed = True

        if copy_failed:
            print "- File %s - ***ERROR*** gfal-copy returned error status while copying from DAQ to LNF"%rawfile
            with open(self.transfer_error_list_file,"a") as telf:
                telf.write("%s - %s copy\n"%(self.now_str(),rawfile))
            cmd = "gfal-rm %s/%s/%s"%(self.lnf_srm,self.data_dir,rawfile)
            for line in self.run_command(cmd): print line.rstrip()
            return "error"

        # Verify checksum at source and destination
        print "- File %s - Getting ADLER32 checksum at source"%rawfile
        a32_src = self.get_checksum_daq(rawfile)
        print "- File %s - Getting ADLER32 checksum at destination"%rawfile
        a32_dst = self.get_checksum_lnf(rawfile)
        print "- File %s - ADLER32 CRC - Source: %s - Destination: %s"%(rawfile,a32_src,a32_dst)
        if ( a32_src == "" or a32_dst == "" or a32_src != a32_dst ):
            print "- File %s - ***ERROR*** unmatched checksum while copying from DAQ to LNF"%rawfile
            with open(self.transfer_error_list_file,"a") as telf:
                telf.write("%s - %s checksum\n"%(self.now_str(),rawfile))
            cmd = "gfal-rm %s/%s/%s"%(self.lnf_srm,self.data_dir,rawfile)
            for line in self.run_command(cmd): print line.rstrip()
            return "error"

        return "ok"

    def copy_file_lnf_cnaf(self,rawfile):

        self.renew_voms_proxy()

        copy_failed = False
        print "- File %s - Starting copy from LNF to CNAF"%rawfile
        cmd = "gfal-copy -t 3600 -T 3600 -p --checksum ADLER32 %s/%s/%s %s/%s/%s"%(self.lnf_srm,self.data_dir,rawfile,self.cnaf_srm,self.data_dir,rawfile);
        for line in self.run_command(cmd):
            print line.rstrip()
            if re.match("^gfal-copy error: ",line): copy_failed = True

        if copy_failed:
            print "- File %s - ***ERROR*** gfal-copy returned error status while copying from LNF to CNAF"%rawfile
            with open(self.transfer_error_list_file,"a") as telf:
                telf.write("%s - %s copy\n"%(self.now_str(),rawfile))
            cmd = "gfal-rm %s/%s/%s"%(self.cnaf_srm,self.data_dir,rawfile)
            for line in self.run_command(cmd): print line.rstrip()
            return "error"

        return "ok"

    def copy_file_lnf_kloe(self,rawfile):

        self.renew_voms_proxy()

        tmp_file = "/tmp/%s"%rawfile

        copy_failed = False

        # As in gfal-copy SFTP destination is not working, first create a temporary local copy of the file
        print "- File %s - Starting copy from LNF to KLOE"%rawfile
        #cmd = "gfal-copy -t 3600 -T 3600 -p -D\"SFTP PLUGIN:USER=%s\" -D\"SFTP PLUGIN:PRIVKEY=%s\" %s/%s/%s %s/%s/%s"%(self.kloe_user,self.kloe_keyfile,self.lnf_srm,self.data_dir,rawfile,self.kloe_sftp,self.data_dir,rawfile);
        cmd = "gfal-copy -t 3600 -T 3600 -p %s/%s/%s file://%s"%(self.lnf_srm,self.data_dir,rawfile,tmp_file);
        for line in self.run_command(cmd):
            print line.rstrip()
            if re.match("^gfal-copy error: ",line):
                copy_failed = True

        if copy_failed:
            #print "- File %s - ***ERROR*** gfal-copy returned error status while copying from LNF to KLOE"%rawfile
            print "- File %s - ***ERROR*** gfal-copy returned error status while copying from LNF to local file"%rawfile
            with open(self.transfer_error_list_file,"a") as telf:
                telf.write("%s - %s copy\n"%(self.now_str(),rawfile))
            for line in self.run_command("rm -f %s"%tmp_file): print line.rstrip()
            return "error"

        # Make sure destination directory exists on KLOE server
        m = re.match("(.*)/.*\.root",rawfile)
        if (m):
            rawdir = m.group(1)
        else:
            print "- File %s - ***ERROR*** cannot extract directory from file name"%rawfile
            with open(self.transfer_error_list_file,"a") as telf:
                telf.write("%s - %s copy\n"%(self.now_str(),rawfile))
            for line in self.run_command("rm -f %s"%tmp_file): print line.rstrip()
            return "error"
        cmd = "%s \'( mkdir -p %s/%s/%s )\'"%(self.kloe_ssh,self.kloe_path,self.data_dir,rawdir)
        for line in self.run_command(cmd): print line.rstrip()

        # Now send local copy to KLOE using good old scp
        cmd = "scp -i %s %s %s@%s:%s/%s/%s"%(self.kloe_keyfile,tmp_file,self.kloe_user,self.kloe_server,self.kloe_path,self.data_dir,rawfile);
        for line in self.run_command(cmd): print line.rstrip()
        # Probably need to add some scp error check

        # Clean up local temporary file
        for line in self.run_command("rm -f %s"%tmp_file): print line.rstrip()

        # Verify if the copy was correctly completed
        print "- File %s - Getting ADLER32 checksum at source"%rawfile
        a32_src = self.get_checksum_lnf(rawfile)
        print "- File %s - Getting ADLER32 checksum at destination"%rawfile
        a32_dst = self.get_checksum_kloe(rawfile)
        print "- File %s - ADLER32 CRC - Source: %s - Destination: %s"%(rawfile,a32_src,a32_dst)
        if ( a32_src == "" or a32_dst == "" or a32_src != a32_dst ):
            print "- File %s - ***ERROR*** unmatched checksum while copying from LNF to KLOE"%rawfile
            with open(self.transfer_error_list_file,"a") as telf:
                telf.write("%s - %s checksum\n"%(self.now_str(),rawfile))
            cmd = "%s \'( cd %s/%s; rm -f %s )\'"%(self.kloe_ssh,self.kloe_path,self.data_dir,rawfile);
            for line in self.run_command(cmd): print line.rstrip()
            return "error"

        return "ok"

    def copy_file_daq_cnaf(self,rawfile):

        self.renew_voms_proxy()

        copy_failed = False
        print "- File %s - Starting copy from DAQ to CNAF"%rawfile
        cmd = "gfal-copy -t 3600 -T 3600 -p -D\"SFTP PLUGIN:USER=%s\" -D\"SFTP PLUGIN:PRIVKEY=%s\" %s/%s/%s %s/%s/%s"%(self.daq_user,self.daq_keyfile,self.daq_sftp,self.data_dir,rawfile,self.cnaf_srm,self.data_dir,rawfile);
        for line in self.run_command(cmd):
            print line.rstrip()
            if re.match("^gfal-copy error: ",line): copy_failed = True

        if copy_failed:
            print "- File %s - ***ERROR*** gfal-copy returned error status while copying from DAQ to CNAF"%rawfile
            with open(self.transfer_error_list_file,"a") as telf:
                telf.write("%s - %s copy\n"%(self.now_str(),rawfile))
            cmd = "gfal-rm %s/%s/%s"%(self.cnaf_srm,self.data_dir,rawfile)
            for line in self.run_command(cmd): print line.rstrip()
            return "error"

        print "- File %s - Getting ADLER32 checksum at source"%rawfile
        a32_src = get_checksum_daq(rawfile)
        print "- File %s - Getting ADLER32 checksum at destination"%rawfile
        a32_dst = get_checksum_cnaf(rawfile)
        cmd = "gfal-sum %s/%s/%s adler32"%(self.cnaf_srm,self.data_dir,rawfile);
        print "- File %s - ADLER32 CRC - Source: %s - Destination: %s"%(rawfile,a32_src,a32_dst)
        if ( a32_src == "" or a32_dst == "" or a32_src != a32_dst ):
            print "- File %s - ***ERROR*** unmatched checksum while copying from DAQ to CNAF"%rawfile
            with open(self.transfer_error_list_file,"a") as telf:
                telf.write("%s - %s checksum\n"%(self.now_str(),rawfile))
            cmd = "gfal-rm %s/%s/%s"%(self.cnaf_srm,self.data_dir,rawfile)
            for line in self.run_command(cmd): print line.rstrip()
            return "error"

        return "ok"

    def copy_file_cnaf_lnf(self,rawfile):
        print "Copying file %s from CNAF to LNF: NOT!"%rawfile

    def copy_file_cnaf_kloe(self,rawfile):
        print "Copying file %s from CNAF to KLOE: NOT!"%rawfile

    def get_kloe_used_space(self):
        used = 100
        cmd = "%s \'( df | grep \/pdm | awk \"{print \$4}\" )\'"%self.kloe_ssh
        for line in self.run_command(cmd):
            try:
                used = int(line.rstrip()[:-1])
            except:
                print "- WARNING - Could not extract used disk space from KLOE server"
                used = 100
        return used

    def now_str(self):
        return time.strftime("%Y-%m-%d %H:%M:%S",time.gmtime())

    def main_loop(self):

        print ""
        print "### PadmeCDRServer ### Start copying ###"
        print ""

        # Loop forever waiting for new files to appear on data server
        while True:

            print ""
            print "=== PadmeCDRServer starting new iteration ==="
            print ""

            start_iteration_time = time.time()

            self.check_stop_cdr()

            # Make a full list by merging lists from source and destination sites
            full_list = []

            if (self.source_site == "DAQ"):
                if self.get_file_list_daq() == "error":
                    print "ERROR - DAQ server has problems: aborting"%self.daq_server
                    sys.exit(2)
                full_list.extend(self.daq_list)

            if (self.source_site == "LNF" or self.destination_site == "LNF"):
                if self.get_file_list_lnf() == "error":
                    print "ERROR - LNF site has problems: aborting"
                    sys.exit(2)
                full_list.extend(self.lnf_list)

            if (self.source_site == "CNAF" or self.destination_site == "CNAF"):
                if self.get_file_list_cnaf() == "error":
                    print "WARNING - CNAF site has problems: aborting"
                    sys.exit(2)
                full_list.extend(self.cnaf_list)

            if (self.source_site == "KLOE" or self.destination_site == "KLOE"):
                if self.get_file_list_kloe() == "error":
                    print "WARNING - KLOE site has problems: aborting"
                    sys.exit(2)
                full_list.extend(self.kloe_list)

            # Remove duplicates and sort final list
            print "- Removing duplicates and sorting merged list"
            full_list = sorted(set(full_list))
            self.check_stop_cdr()

            print "- Starting copy of new files"
            for rawfile in (full_list):

                if (self.source_site == "DAQ"):
                    if (self.destination_site == "LNF"):
                        # DAQ -> LNF
                        if ( (rawfile in self.daq_list) and not (rawfile in self.lnf_list) ):
                            if self.copy_file_daq_lnf(rawfile) == "ok":
                                print "- File %s - Copy from DAQ to LNF successful"%rawfile
                            self.check_stop_cdr()
                    elif (self.destination_site == "CNAF"):
                        # DAQ -> CNAF
                        if ( (rawfile in self.daq_list) and not (rawfile in self.cnaf_list) ):
                            if self.copy_file_daq_cnaf(rawfile) == "ok":
                                print "- File %s - Copy from DAQ to CNAF successful"%rawfile
                            self.check_stop_cdr()
                elif (self.source_site == "LNF"):
                    if (self.destination_site == "CNAF"):
                        # LNF -> CNAF
                        if ( (rawfile in self.lnf_list) and not (rawfile in self.cnaf_list) ):
                            if self.copy_file_lnf_cnaf(rawfile) == "ok":
                                print "- File %s - Copy from LNF to CNAF successful"%rawfile
                            self.check_stop_cdr()
                    elif (self.destination_site == "KLOE"):
                        # LNF -> KLOE
                        if ( (rawfile in self.lnf_list) and not (rawfile in self.kloe_list) ):
                            if self.get_kloe_used_space() > 95:
                                print "- WARNING - KLOE disk space is more than 95% full - Suspending file copy"
                                break
                            if self.copy_file_lnf_kloe(rawfile) == "ok":
                                print "- File %s - Copy from LNF to KLOE successful"%rawfile
                            self.check_stop_cdr()

            end_iteration_time = time.time()

            print ""
            print "=== PadmeCDRServer iteration finished ==="
            print ""

            # Check if current iteration lasted a minimum time (currently 4 hours)
            # If not, pause the remaining time to avoid stress on grid data servers
            iteration_duration = end_iteration_time-start_iteration_time
            if (iteration_duration < self.iteration_minimum_duration):
                iteration_pause = self.iteration_minimum_duration-iteration_duration
                print "- Iteration lasted %ds < %ds - Sleeping %ds"%(iteration_duration,self.iteration_minimum_duration,iteration_pause)
                for _ in range(int(iteration_pause/10)):
                    self.check_stop_cdr()
                    time.sleep(10)
